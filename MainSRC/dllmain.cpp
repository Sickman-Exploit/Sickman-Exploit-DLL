#include <Windows.h>
#include <iostream>
#include <vector>
#include "Luau/BytecodeBuilder.h"
#include "Luau/Compiler/include/Luau/Compiler.h"
#include <format>

using namespace std;

int Exploit_identity = 8; //level of your api dll

DWORD aslr(uintptr_t address) {
    return address - 0x40000 + uintptr_t(GetModuleHandleA(NULL));
}

struct CallS 
{
    uintptr_t func;
    int nresults;
};

uintptr_t addr = 0x1292F00;
int(__cdecl* get_data_model)() = bit_cast<int(__cdecl*)()>(aslr(0x1292F00));
int(__fastcall* luau_load)(uintptr_t, const char*, const char*, size_t, int) = bit_cast<int(__fastcall *)(uintptr_t, const char*, const char*, size_t, int)>(aslr(0x185FAB0));
int(__fastcall* raw_unprotected)(uintptr_t, uintptr_t, CallS*) = bit_cast<int(__fastcall*)(uintptr_t, uintptr_t, CallS*)>(aslr(0x1862FA0));
uintptr_t fcall = aslr(0x185D0D0);

struct ClientBytecodeEncoder : GayLang::BytecodeEncoder 
{
    uint8_t encodeOp(uint8_t op) 
    {
        return op * 227;
    }
};

void hook_free_console() {
    static auto ptr = bit_cast<uintptr_t>(&FreeConsole);
    static auto ptr_jmp = ptr + 0x6;

    DWORD old{};

    VirtualProtect(bit_cast<void*>(ptr), 0x6, PAGE_EXECUTE_READWRITE, &old);

    *bit_cast<uintptr_t**>(ptr + 0x2) = &ptr_jmp;
    *bit_cast<uint8_t*>(ptr + 0x6) = 0xC3;

    VirtualProtect(bit_cast<void*>(ptr), 0x6, old, &old);
}

uintptr_t get_script_context(uintptr_t data_model) {
    for (uintptr_t child = *bit_cast<uintptr_t*>(*bit_cast<uintptr_t*>(data_model + 0x2C)); child != *bit_cast<uintptr_t*>(*bit_cast<uintptr_t*>(data_model + 0x2C) + 4); child += 8)
    {
        uintptr_t thong = *bit_cast<uintptr_t*>(*bit_cast<uintptr_t*>(child + 0x28) + 0x24);
        if (strcmp(*bit_cast<size_t*>(thong + 0x10) < 16 ? bit_cast<const char*>(thong) : *bit_cast<const char**>(thong), "Script Context") == 0) {
            return *bit_cast<uintptr_t*>(child + 0x28);
        }
    }

    return NULL;
}

uintptr_t data_model_get() {
    return *bit_cast<uintptr_t*>(get_data_model()) + 0x8;
}

void execute(const char* scrip) {
    uintptr_t L = (get_script_context(data_model_get()) + 324) ^ *bit_cast<uintptr_t*>(get_script_context(data_model_get()) + 324);

    const char* script = format(R"(
        spawn(function()
            printidentity = function()
                print("Current identity is {}") --how the pros do it :sunglasses:
            end
            
            {}
        end)

    )", Exploit_identity, scrip).c_str();

    ClientBytecodeEncoder encoder;
    string bytecode = GayLang::compile(script, {}, {}, &encoder);

    luau_load(L, "egg", bytecode.c_str(), bytecode.size(), 0);
    __asm add esp, 12;
    
    CallS data;
    data.func = *bit_cast<uintptr_t*>(L + 20);
    data.nresults = 1;

    raw_unprotected(L, fcall, &data);
    __asm add esp, 4;

    *bit_cast<uintptr_t*>(L + 16) = *bit_cast<uintptr_t*>(L + 20);
}

int main() {
    hook_free_console();

    AllocConsole();
    FILE* filestream;
    
    freopen_s(&filestream, "COIN$", "r", stdin);
    freopen_s(&filestream, "COIN$", "r", stdout);
    freopen_s(&filestream, "COIN$", "r", stderr);

    SetConsoleTitleA("Sickman Exploit DLL");

    cout << R"( 
  _________.__        __                           ___________              .__         .__  __    ____   ________ 
 /   _____/|__| ____ |  | __ _____ _____    ____   \_   _____/__  _________ |  |   ____ |__|/  |_  \   \ /   /_   |
 \_____  \ |  |/ ___\|  |/ //     \\__  \  /    \   |    __)_\  \/  /\____ \|  |  /  _ \|  \   __\  \   Y   / |   |
 /        \|  \  \___|    <|  Y Y  \/ __ \|   |  \  |        \>    < |  |_> >  |_(  <_> )  ||  |     \     /  |   |
/_______  /|__|\___  >__|_ \__|_|  (____  /___|  / /_______  /__/\_ \|   __/|____/\____/|__||__|      \___/   |___|
        \/         \/     \/     \/     \/     \/          \/      \/|__|                                          
)" << endl;
    long long whitelist[] =
    {
        4483381587,
    };

    long long blacklist[] =
    {
        1,
    };

    long long userid = *bit_cast<long long*>((uintptr_t)GetModuleHandleA(nullptr) + 0x037CADB0);
    long long placeid = *bit_cast<long long*>((uintptr_t)GetModuleHandleA(nullptr) + 0x37CAD88);

    if (find(begin(whitelist), end(whitelist), placeid)) {
        cout << "Unsafe Game! proceed with caution." << endl;
    }

    if (find(begin(blacklist), end(blacklist), userid)) {
        cout << "You are blacklisted from this Client" << endl;
    }

    while (true)
    {
        string script;
        cin >> script;
        execute(script.c_str());
        cout << "Script Executed!" << endl;
    }
}

BOOL APIENTRY DllMain( HMODULE hModule,
                       DWORD  ul_reason_for_call,
                       LPVOID lpReserved
                     )
{
    switch (ul_reason_for_call)
    {
    case DLL_PROCESS_ATTACH:
        CreateThread(NULL, NULL, (LPTHREAD_START_ROUTINE)main, NULL, NULL, NULL);
    case DLL_THREAD_ATTACH:
    case DLL_THREAD_DETACH:
    case DLL_PROCESS_DETACH:
        break;
    }
    return TRUE;
}

